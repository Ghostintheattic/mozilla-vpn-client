import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "filterproxymodel.h"
        name: "FilterProxyModel"
        accessSemantics: "reference"
        interfaces: ["QQmlParserStatus"]
        exports: ["Mozilla.VPN.qmlcomponents/VPNFilterProxyModel 0.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "filterCallback"
            type: "QJSValue"
            read: "filterCallback"
            write: "setFilterCallback"
            notify: "filterCallbackChanged"
            index: 0
        }
        Property {
            name: "sortCallback"
            type: "QJSValue"
            read: "sortCallback"
            write: "setSortCallback"
            notify: "sortCallbackChanged"
            index: 1
        }
        Property {
            name: "source"
            type: "QAbstractListModel"
            isPointer: true
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 2
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "sourceChanged"
            index: 3
            isReadonly: true
        }
        Signal { name: "filterCallbackChanged" }
        Signal { name: "sortCallbackChanged" }
        Signal { name: "sourceChanged" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "pos"; type: "int" }
        }
    }
    Component {
        file: "lottieprivate.h"
        name: "LottiePrivate"
        accessSemantics: "reference"
        exports: ["Mozilla.VPN.qmlcomponents/LottiePrivate 0.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "source"
            type: "QString"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "readyToPlay"
            type: "bool"
            read: "readyToPlay"
            write: "setReadyToPlay"
            notify: "readyToPlayChanged"
            index: 1
        }
        Property {
            name: "speed"
            type: "double"
            read: "speed"
            write: "setSpeed"
            notify: "speedChanged"
            index: 2
        }
        Property {
            name: "loops"
            type: "QJSValue"
            read: "loops"
            write: "setLoops"
            notify: "loopsChanged"
            index: 3
        }
        Property {
            name: "reverse"
            type: "bool"
            read: "reverse"
            write: "setReverse"
            notify: "reverseChanged"
            index: 4
        }
        Property { name: "status"; type: "QJSValue"; read: "status"; index: 5; isReadonly: true }
        Property {
            name: "autoPlay"
            type: "bool"
            read: "autoPlay"
            write: "setAutoPlay"
            notify: "autoPlayChanged"
            index: 6
        }
        Property {
            name: "fillMode"
            type: "QString"
            read: "fillMode"
            write: "setFillMode"
            notify: "fillModeChanged"
            index: 7
        }
        Signal { name: "sourceChanged" }
        Signal { name: "readyToPlayChanged" }
        Signal { name: "speedChanged" }
        Signal { name: "loopsChanged" }
        Signal { name: "reverseChanged" }
        Signal { name: "autoPlayChanged" }
        Signal { name: "fillModeChanged" }
        Signal { name: "loopCompleted" }
        Method {
            name: "setCanvasAndContainer"
            Parameter { name: "canvas"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "container"; type: "QQuickItem"; isPointer: true }
        }
        Method { name: "clearAndResize" }
        Method { name: "destroyAndRecreate" }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method { name: "eventPlayingCompleted" }
        Method { name: "eventLoopCompleted" }
        Method {
            name: "eventEnterFrame"
            Parameter { name: "value"; type: "QJSValue" }
        }
    }
}
